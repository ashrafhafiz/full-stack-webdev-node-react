{"version":3,"sources":["../../src/services/twitterPassport.js"],"names":["TWITTER_CONSUMER_KEY","process","env","TWITTER_CONSUMER_SECRET","passport","serializeUser","user","cb","id","deserializeUser","User","findById","then","use","TwitterStrategy","Strategy","consumerKey","consumerSecret","callbackURL","proxy","token","tokenSecret","profile","findOne","twitterId","existingUser","newUser","name","displayName","email","username","save"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA,IAAMA,oBAAoB,GAAGC,OAAO,CAACC,GAAR,CAAYF,oBAAzC;AACA,IAAMG,uBAAuB,GAAGF,OAAO,CAACC,GAAR,CAAYC,uBAA5C;;AAEAC,qBAASC,aAAT,CAAuB,UAACC,IAAD,EAAOC,EAAP,EAAc;AACnCA,EAAAA,EAAE,CAAC,IAAD,EAAOD,IAAI,CAACE,EAAZ,CAAF;AACD,CAFD;;AAIAJ,qBAASK,eAAT,CAAyB,UAACD,EAAD,EAAKD,EAAL,EAAY;AACnCG,wBAAKC,QAAL,CAAcH,EAAd,EAAkBI,IAAlB,CAAuB,UAACN,IAAD,EAAU;AAC/BC,IAAAA,EAAE,CAAC,IAAD,EAAOD,IAAP,CAAF;AACD,GAFD;AAGD,CAJD;;AAMAF,qBAASS,GAAT,CACE,IAAIC,4BAAgBC,QAApB,CACE;AACEC,EAAAA,WAAW,EAAEhB,oBADf;AAEEiB,EAAAA,cAAc,EAAEd,uBAFlB;AAGEe,EAAAA,WAAW,EAAE,wBAHf;AAIEC,EAAAA,KAAK,EAAE;AAJT,CADF,EAOE,UAACC,KAAD,EAAQC,WAAR,EAAqBC,OAArB,EAA8Bf,EAA9B,EAAqC;AACnCG,wBAAKa,OAAL,CAAa;AAAEC,IAAAA,SAAS,EAAEF,OAAO,CAACd;AAArB,GAAb,EAAwCI,IAAxC,CAA6C,UAACa,YAAD,EAAkB;AAC7D,QAAIA,YAAJ,EAAkB,OAAOlB,EAAE,CAAC,IAAD,EAAOkB,YAAP,CAAT;AAClB,QAAMC,OAAO,GAAG,IAAIhB,qBAAJ,CAAS;AACvBc,MAAAA,SAAS,EAAEF,OAAO,CAACd,EADI;AAEvBmB,MAAAA,IAAI,EAAEL,OAAO,CAACM,WAFS;AAGvBC,MAAAA,KAAK,EAAE,MAAMP,OAAO,CAACQ;AAHE,KAAT,CAAhB;AAKAJ,IAAAA,OAAO,CAACK,IAAR,GAAenB,IAAf,CAAoB,UAACc,OAAD;AAAA,aAAanB,EAAE,CAAC,IAAD,EAAOmB,OAAP,CAAf;AAAA,KAApB;AACD,GARD;AASD,CAjBH,CADF","sourcesContent":["import passport from \"passport\";\r\nimport TwitterStrategy from \"passport-twitter\";\r\nimport \"dotenv/config\";\r\nimport User from \"../models/userModel\";\r\n\r\n//\r\n// T W I T T E R   A U T H E N T I C A T I O N\r\n//\r\nconst TWITTER_CONSUMER_KEY = process.env.TWITTER_CONSUMER_KEY;\r\nconst TWITTER_CONSUMER_SECRET = process.env.TWITTER_CONSUMER_SECRET;\r\n\r\npassport.serializeUser((user, cb) => {\r\n  cb(null, user.id);\r\n});\r\n\r\npassport.deserializeUser((id, cb) => {\r\n  User.findById(id).then((user) => {\r\n    cb(null, user);\r\n  });\r\n});\r\n\r\npassport.use(\r\n  new TwitterStrategy.Strategy(\r\n    {\r\n      consumerKey: TWITTER_CONSUMER_KEY,\r\n      consumerSecret: TWITTER_CONSUMER_SECRET,\r\n      callbackURL: \"/auth/twitter/callback\",\r\n      proxy: true,\r\n    },\r\n    (token, tokenSecret, profile, cb) => {\r\n      User.findOne({ twitterId: profile.id }).then((existingUser) => {\r\n        if (existingUser) return cb(null, existingUser);\r\n        const newUser = new User({\r\n          twitterId: profile.id,\r\n          name: profile.displayName,\r\n          email: \"@\" + profile.username,\r\n        });\r\n        newUser.save().then((newUser) => cb(null, newUser));\r\n      });\r\n    }\r\n  )\r\n);\r\n"],"file":"twitterPassport.js"}