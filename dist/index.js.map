{"version":3,"sources":["../src/index.js"],"names":["connectionURI","process","env","MONGO_URI","connectionOptions","useNewUrlParser","useUnifiedTopology","useCreateIndex","mongoose","connect","connection","on","console","error","bind","log","app","SESSION_SECRET","COOKIE_MAX_AGE","use","secret","resave","saveUninitialized","cookie","maxAge","passport","initialize","session","express","json","googleAuthRouters","twitterAuthRouters","apiRoutes","get","req","res","send","Hi","NODE_ENV","sendFile","path","resolve","__dirname","PORT","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA,IAAMA,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAlC;AACA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,eAAe,EAAE,IADO;AAExBC,EAAAA,kBAAkB,EAAE,IAFI;AAGxBC,EAAAA,cAAc,EAAE;AAHQ,CAA1B;;AAKAC,qBAASC,OAAT,CAAiBT,aAAjB,EAAgCI,iBAAhC;;AACAI,qBAASE,UAAT,CAAoBC,EAApB,CACE,OADF,EAEEC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmB,6BAAnB,CAFF;;AAIAN,qBAASE,UAAT,CAAoBC,EAApB,CAAuB,MAAvB,EAA+B,YAAM;AACnCC,EAAAA,OAAO,CAACG,GAAR,CAAY,yCAAZ;AACD,CAFD,E,CAIA;AACA;AACA;;;AACA,IAAMC,GAAG,GAAG,0BAAZ,C,CAEA;AACA;AACA;;AACA,IAAMC,cAAc,GAAGhB,OAAO,CAACC,GAAR,CAAYe,cAAnC;AACA,IAAMC,cAAc,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAA3C,C,CAEA;AACA;AACA;;AACAF,GAAG,CAACG,GAAJ,CACE,gCAAQ;AACNC,EAAAA,MAAM,EAAEH,cADF;AAENI,EAAAA,MAAM,EAAE,KAFF;AAGNC,EAAAA,iBAAiB,EAAE,IAHb;AAINC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAM,EAAEN;AAAV;AAJF,CAAR,CADF,EAOEO,qBAASC,UAAT,EAPF,EAQED,qBAASE,OAAT,EARF,EASEC,oBAAQC,IAAR,EATF,E,CAWA;AACA;AACA;AAEA;AACA;AACA;;AACAb,GAAG,CAACG,GAAJ,CAAQW,4BAAR,EAA2BC,6BAA3B,EAA+CC,qBAA/C,E,CACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,GAAG,CAACiB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAT;AACD,CAFD;;AAIA,IAAIpC,OAAO,CAACC,GAAR,CAAYoC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACAtB,EAAAA,GAAG,CAACG,GAAJ,CAAQS,8BAAe,cAAf,CAAR,EAHyC,CAKzC;AACA;;AACAZ,EAAAA,GAAG,CAACiB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,IAAAA,GAAG,CAACI,QAAJ,CAAaC,iBAAKC,OAAL,CAAaC,SAAb,EAAwB,QAAxB,EAAkC,OAAlC,EAA2C,YAA3C,CAAb;AACD,GAFD;AAGD;;AAED,IAAMC,IAAI,GAAG1C,OAAO,CAACC,GAAR,CAAYyC,IAAZ,IAAoB,IAAjC;AAEA3B,GAAG,CAAC4B,MAAJ,CAAWD,IAAX,EAAiB,YAAM;AACrB/B,EAAAA,OAAO,CAACG,GAAR,wDAA4D4B,IAA5D;AACD,CAFD","sourcesContent":["import \"@babel/polyfill\";\r\nimport \"dotenv/config\";\r\nimport express from \"express\";\r\nimport session from \"express-session\";\r\nimport path from \"path\";\r\nimport passport from \"passport\";\r\nimport \"./services/googlePassport\";\r\nimport \"./services/twitterPassport\";\r\nimport googleAuthRouters from \"./routes/googleAuthRoutes\";\r\nimport twitterAuthRouters from \"./routes/twitterAuthRoutes\";\r\nimport apiRoutes from \"./routes/apiRoutes\";\r\nimport mongoose from \"mongoose\";\r\n\r\n//\r\n// M o n g o D B   C o n n e c t i o n\r\n//\r\nconst connectionURI = process.env.MONGO_URI;\r\nconst connectionOptions = {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  useCreateIndex: true,\r\n};\r\nmongoose.connect(connectionURI, connectionOptions);\r\nmongoose.connection.on(\r\n  \"error\",\r\n  console.error.bind(\"MONGO DB Connection Error: \")\r\n);\r\nmongoose.connection.on(\"open\", () => {\r\n  console.log(\"Connection Established with MONGO DB...\");\r\n});\r\n\r\n//\r\n// E x p r e s s   A P P\r\n//\r\nconst app = express();\r\n\r\n//\r\n// S e s s i o n   &   C o o k i e\r\n//\r\nconst SESSION_SECRET = process.env.SESSION_SECRET;\r\nconst COOKIE_MAX_AGE = 30 * 24 * 60 * 60 * 1000;\r\n\r\n//\r\n// M i d d l e w a r e\r\n//\r\napp.use(\r\n  session({\r\n    secret: SESSION_SECRET,\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    cookie: { maxAge: COOKIE_MAX_AGE },\r\n  }),\r\n  passport.initialize(),\r\n  passport.session(),\r\n  express.json()\r\n);\r\n// Combining multiple app.use middleware statements in a single one.\r\n// app.use(passport.initialize());\r\n// app.use(passport.session());\r\n\r\n//\r\n// R o u t e s\r\n//\r\napp.use(googleAuthRouters, twitterAuthRouters, apiRoutes);\r\n// Combining multiple app.use statements in a single one.\r\n// app.use(googleAuthRouters);\r\n// app.use(twitterAuthRouters);\r\n\r\n// Defining CORS\r\n// app.use(function (req, res, next) {\r\n//   res.setHeader(\r\n//     \"Access-Control-Allow-Headers\",\r\n//     \"X-Requested-With,content-type\"\r\n//   );\r\n//   res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n//   res.setHeader(\r\n//     \"Access-Control-Allow-Methods\",\r\n//     \"GET, POST, OPTIONS, PUT, PATCH, DELETE\"\r\n//   );\r\n//   res.setHeader(\"Access-Control-Allow-Credentials\", true);\r\n//   next();\r\n// });\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send({ Hi: \"There to main screen.\" });\r\n});\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  // Express will serve up production assets\r\n  // like our main.js file, or main.css\r\n  app.use(express.static(\"client/build\"));\r\n\r\n  // Express will serve up the index.html file\r\n  // if it doesn't recognize the route\r\n  app.get(\"*\", (req, res) => {\r\n    res.sendFile(path.resolve(__dirname, \"client\", \"build\", \"index.html\"));\r\n  });\r\n}\r\n\r\nconst PORT = process.env.PORT || 5001;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Application is listening at http://localhost:${PORT}`);\r\n});\r\n"],"file":"index.js"}